# Generated by Django 3.1.3 on 2020-12-16 13:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from mtgorp.models.tournaments.tournaments import Tournament

import tournaments.models
import utils.fields
import utils.methods


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("limited", "0014_auto_20201214_1520"),
    ]

    operations = [
        migrations.CreateModel(
            name="ScheduledMatch",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="ScheduledSeat",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seats",
                        to="tournaments.scheduledmatch",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(default=utils.methods.get_random_name, max_length=255)),
                (
                    "state",
                    utils.fields.EnumField(
                        default=tournaments.models.Tournament.TournamentState["ONGOING"],
                        enum_type="tournaments.models.LimitedSessionState",
                    ),
                ),
                ("tournament_type", utils.fields.StringMapField(mapping=Tournament.tournaments_map, max_length=255)),
                ("tournament_config", models.JSONField()),
                ("match_type", utils.fields.SerializeableField(klass="mtgorp.models.tournaments.matches.MatchType")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TournamentParticipant",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "deck",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tournament_entries",
                        to="limited.pooldeck",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tournament",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="tournaments.tournament",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TournamentWinner",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="tournaments.tournamentparticipant"
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="tournaments.tournament"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TournamentRound",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("index", models.PositiveSmallIntegerField()),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="rounds", to="tournaments.tournament"
                    ),
                ),
            ],
            options={
                "unique_together": {("tournament_id", "index")},
            },
        ),
        migrations.CreateModel(
            name="SeatResult",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("wins", models.PositiveSmallIntegerField()),
                (
                    "scheduled_seat",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="tournaments.scheduledseat",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="scheduledseat",
            name="participant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="scheduled_tournament_seats",
                to="tournaments.tournamentparticipant",
            ),
        ),
        migrations.AddField(
            model_name="scheduledmatch",
            name="round",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="scheduled_matches",
                to="tournaments.tournamentround",
            ),
        ),
        migrations.CreateModel(
            name="MatchResult",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("draws", models.IntegerField()),
                (
                    "scheduled_match",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="tournaments.scheduledmatch",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
